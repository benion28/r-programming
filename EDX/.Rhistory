# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species)) +
geom_bar(fill = "green") +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species)) +
geom_bar(fill = "#0073C2FF") +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species)) +
geom_bar(fill = "blue") +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species)) +
geom_bar(fill = "blue", width = 23) +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species)) +
geom_bar(fill = "blue", width = 2) +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species)) +
geom_bar(fill = "blue", width = 2) +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species)) +
geom_bar(fill = "blue", width = 0.5) +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species)) +
geom_bar(fill = "blue") +
labs(x = "Species", y = "Species Frequency")
plot(x = frequency_table$Species, y = frequency_table$Frequency)
plot(frequency_table$Frequency)
??plot
?plot
plot(frequency_table)
plot(frequency_table)
plot(frequency_table)
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species)) +
geom_col(fill = "blue") +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species y = Frequency)) +
geom_col(fill = "blue") +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species, y = Frequency)) +
geom_col(fill = "blue") +
labs(x = "Species", y = "Species Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species, y = Frequency)) +
geom_col(fill = "blue") +
labs(x = "Species", y = "Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species, y = Frequency)) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
species_list
species_frequency
View(frequency_table)
frequency_table[1]:frequency_table[13]
frequency_table$Species[1]:frequency_table$Species[13]
sort(frequency_table, frequency)
Yes
typeof(frequency_table$Frequency[1])
# Frequency
species_frequency <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_frequency
total <- length(dataset$SPECIES[dataset$SPECIES == variable])
species_frequency <- append(item, total)
print(species_frequency)
}
# Frequency
species_frequency <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_frequency
total <- as.integer(length(dataset$SPECIES[dataset$SPECIES == variable]))
species_frequency <- append(item, total)
}
typeof(frequency_table$Frequency[1])
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species, y = as.integer(Frequency))) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species, y = as.double(Frequency))) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species, y = as.data.frame.integer(Frequency))) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species, y = as.numeric(Frequency))) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species, y = Frequency)) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
frequency_table
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species[Species != "Total"], y = Frequency[Frequency != "590"])) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species[Species != "Total"], y = Frequency[Frequency != 590])) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Frequency Distribution Bar
ggplot(frequency_table[frequency_table$Species != "Total"], aes(x = Species, y = Frequency)) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
frequency_table[frequency_table$Species != "Total"]
frequency_table$Species[frequency_table$Species != "Total"]
frequency_table$Species
# Frequency Distribution Bar
ggplot(frequency_table, aes(x = Species[frequency_table$Species != "Total"], y = Frequency[frequency_table$Species != "Total"])) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
frequency_table$Frequency[frequency_table$Frequency != "590"]
frequency_table$Frequency
as.integer(frequency_table$Frequency)
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
frequency_table$Species[frequency_table$Species != "Total"],
as.integer(frequency_table$Frequency[frequency_table$Frequency != "590"])
)
frequency_dist_bar
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
"Species" = frequency_table$Species[frequency_table$Species != "Total"],
"Frequency" = as.integer(frequency_table$Frequency[frequency_table$Frequency != "590"])
)
frequency_dist_bar
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
"Species" = frequency_table$Species[frequency_table$Species != "Total"],
"Frequency" = as.integer(frequency_table$Frequency[frequency_table$Frequency != "590"])
)
ggplot(frequency_dist_bar, aes(x = Species, y = Frequency)) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
"Species" = frequency_table$Species[frequency_table$Species != "Total"],
"Frequency" = frequency_table$Frequency[frequency_table$Frequency != "590"]
)
ggplot(frequency_dist_bar, aes(x = Species, y = Frequency)) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
"Species" = frequency_table$Species[frequency_table$Species != "Total"],
"Frequency" = frequency_table$Frequency[frequency_table$Frequency != "590"],
sort(Frequency)
)
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
"Species" = frequency_table$Species[frequency_table$Species != "Total"],
"Frequency" = frequency_table$Frequency[frequency_table$Frequency != "590"],
sort(frequency_table$Frequency)
)
?sort
sort(frequency_dist_bar)
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
"Species" = frequency_table$Species[frequency_table$Species != "Total"],
"Frequency" = frequency_table$Frequency[frequency_table$Frequency != "590"],
)
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
"Species" = frequency_table$Species[frequency_table$Species != "Total"],
"Frequency" = frequency_table$Frequency[frequency_table$Frequency != "590"]
)
ggplot(frequency_dist_bar, aes(x = Species, y = Frequency)) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
View(dataset)
View(unique_species_dataset)
unique_species_dataset
frequency_table$Frequency[frequency_table$Species != "Total"]
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
"Species" = frequency_table$Species[frequency_table$Species != "Total"],
"Initials" = c("t.a", "g.a", "k", "k.s", "d.o", "v.d", "a.d", "m.i", "a.a", "p.e", "p.b", "l.s", "s.l", "f.s"),
"Frequency" = frequency_table$Frequency[frequency_table$Species != "Total"]
)
ggplot(frequency_dist_bar, aes(x = Initials, y = Frequency)) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Frequency Distribution Bar
frequency_dist_bar <- data.frame(
"Species" = frequency_table$Species[frequency_table$Species != "Total"],
"Initials" = c("T.a", "G.a", "K", "K.s", "D.o", "V.d", "A.d", "M.i", "A.a", "P.e", "P.b", "L.s", "S.l", "F.s"),
"Frequency" = frequency_table$Frequency[frequency_table$Species != "Total"]
)
ggplot(frequency_dist_bar, aes(x = Initials, y = Frequency)) +
geom_col(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes()) +
geom_histogramgram(Real.Values, fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes()) +
geom_histogram(Real.Values, fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes()) +
geom_histogram(prediction_frame$Real.Values, fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(x = prediction_frame$SVR_Predictions, y = prediction_frame$Real.Values)) +
geom_histogram(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(x = SVR_Predictions, y = Real.Values)) +
geom_histogram(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(x = SVR_Predictions, y = Real.Values)) +
geom_freqpoly(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(x = SVR_Predictions, y = Real.Values)) +
geom_freqpoly(fill = "blue") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(y = SVR_Predictions)) +
geom_freqpoly() +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(y = SVR_Predictions)) +
geom_freqpoly(bins = 30) +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(y = SVR_Predictions)) +
geom_histogram(bins = 30) +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(x = SVR_Predictions)) +
geom_histogram(bins = 30) +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
prediction_frame
# Model Prediction Histogram
ggplot(prediction_frame, aes(x = SVR_Predictions)) +
geom_histogram(bins = 30, color = "red") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(x = SVR_Predictions)) +
geom_histogram(bins = 30, fill = "red") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(x = SVR_Predictions)) +
geom_histogram(bins = 30, fill = "pink") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Model Prediction Histogram
ggplot(prediction_frame, aes(x = SVR_Predictions)) +
geom_histogram(bins = 30, fill = "purple") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
# Senna siamea Species Table
ss_plot_no <- dataset$PLOT.NO[dataset$SPECIES == "Senna siamea"]
ss_species <- dataset$SPECIES[dataset$SPECIES == "Senna siamea"]
sl_diameter
# Import data set
dataset <-  read.csv("C:\\Benion\\Benion Programmings\\Python\\AI & ML\\data\\benion-tree-hd-dataset-new.csv", head=TRUE, sep=",")
# Senna siamea Species Table
ss_plot_no <- dataset$PLOT.NO[dataset$SPECIES == "Senna siamea"]
ss_species <- dataset$SPECIES[dataset$SPECIES == "Senna siamea"]
ss_diameter <- dataset$DIAMETER[dataset$SPECIES == "Senna siamea"]
ss_height <- dataset$HEIGHT[dataset$SPECIES == "Senna siamea"]
s_siamea_table <- data.frame("Plot No"=ss_plot_no, "Species"=ss_species, "Diameter"=ss_diameter, "Height"=ss_height)
View(s_siamea_table)
# Frequency
species_frequency <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_frequency
total <- length(dataset$SPECIES[dataset$SPECIES == variable])
species_frequency <- append(item, total)
}
# Frequency Table
frequency_table <- data.frame(
"Species" = species_list,
"Frequency" = species_frequency
)
frequency_table <- rbind(frequency_table, "Total" = c("Total", sum(frequency_table$Frequency)))
View(frequency_table)
# Species
species_list <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_list
species_list <- append(item, variable)
}
# Frequency
species_frequency <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_frequency
total <- length(dataset$SPECIES[dataset$SPECIES == variable])
species_frequency <- append(item, total)
}
# Frequency Table
frequency_table <- data.frame(
"Species" = species_list,
"Frequency" = species_frequency
)
frequency_table <- rbind(frequency_table, "Total" = c("Total", sum(frequency_table$Frequency)))
View(frequency_table)
# Species
species_list <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_list
species_list <- append(item, variable)
}
species_list
unique_species_dataset <- data.frame("Unique Species"=unique(dataset$SPECIES))
View(unique_species_dataset)
unique_species_dataset
# Species
species_list <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_list
species_list <- append(item, variable)
}
# Frequency
species_frequency <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_frequency
total <- length(dataset$SPECIES[dataset$SPECIES == variable])
species_frequency <- append(item, total)
}
# Frequency Table
frequency_table <- data.frame(
"Species" = species_list,
"Frequency" = species_frequency
)
frequency_table <- rbind(frequency_table, "Total" = c("Total", sum(frequency_table$Frequency)))
View(frequency_table)
install.packages("anfis")
install.packages("anfis")
install.packages("anfis")
install.packages("anfis")
install.packages("FuzzyR")
install.packages("frbs")
install.packages("Anfis-package")
setwd("C://Benion//Benion Programmings//R//EDX")
library(raster)
library (sp)
library (rgdal)
# Load Landsat data from the Maldives ----------------------------------------------------
male_hulhumale <- brick("./downloaded-files/land_use_maldives_2019_08_08/rasterfiles/landsat8_2013may_male_hulhumale.tif")
male_hulhumale
# set the names of the bands
names(male_hulhumale) <- c('blue', 'green', 'red', 'NIR', 'SWIR1', 'SWIR2')
names(male_hulhumale)
# Show information about raster file
male_hulhumale
# access the number of bands of the raster
nlayers(male_hulhumale)
# Get the spatial resolution of the raster
res(male_hulhumale) # resolution: 30m
# Get the number of cells of the raster
ncell(male_hulhumale)
# Visualize the bands of the satellite image  -----------------------------------------
plot(male_hulhumale)
# adjusting the layout of the plot to show figures side by side
nf <- layout(matrix(c(1,0,2), 1, 3, byrow = TRUE), width = c(1,0.2,1), respect = TRUE)
plotRGB(male_hulhumale, r = 3, g = 2, b = 1, axes = TRUE, stretch = "lin", main = "Landsat True Color - Malé and Hulhumale")
plotRGB(male_hulhumale, r = 2, g = 5, b = 4, axes = TRUE, stretch = "lin", main = "Landsat False Colour - Malé and Hulhumale")
# extent(xmin, xmax, ymin, ymax) -> defining a square with coordinates of its four corners that fits the Malé island only
e_male <- extent(333358, 335815, 460500, 462449)
# extent(xmin, xmax, ymin, ymax) -> defining a square with coordinates of its four corners that fits the Malé island only
e_male <- extent(333358, 335815, 460500, 462449)
# Cropping the bigger area(male_hulhumale object) with the square stored in the extent object (e_male)
male_crop <- crop(male_hulhumale, e_male)
# rename the layers of the new raster object male_crop
names(male_crop) <- c("blue","green","red","NIR","SWIR1","SWIR2")
# plot the new cropped spatial object
plot(male_crop)
# save the new file named male_crop in a raster format
writeRaster(male_crop, file="./saved-files/rasterfiles/male_crop.tif",overwrite=TRUE)
# save the new file named male_crop in a raster format
writeRaster(male_crop, file="./saved-files/rasterfiles/male_crop.tif",overwrite=TRUE)
# to open the shapefile use the function readOGR from package rgdal
samp <- readOGR("./downloaded-files/land_use_maldives_2019_08_08/shapefiles/Male/male.shp")
# get the limits for the Malé shapefile
extent(samp)
# Skip NA data (NA stands for not available and means empty data)
samp <- samp[!is.na(samp@data[,'Legend_S2']),]
# The land-use classification is stored in the attribute @data@Legend_S2. You can see the different land uses by calling:
samp@data$Legend_S2
# Define a colour vector (col_vect2) for the visualisation of the shapefile
col_vect2 <- vector()
dat_col2 <- cbind(as.character(na.omit(samp@data[, 'Legend_S2'])))
# now assign colours to the specific land-cover types using the just defined colour vector (e.g. to later display urban areas in grey):
for(j in 1: dim(dat_col2)[1]){
if(dat_col2[j, 1] == 'Urban'){ col_vect2[j] <- 'grey'}
if(dat_col2[j, 1] == 'Beach'){ col_vect2[j] <- 'yellow'}
if(dat_col2[j, 1] == 'Airport'){ col_vect2[j] <- 'orange'}
if(dat_col2[j, 1] == 'Shrubland'){ col_vect2[j] <- 'green'}
if(dat_col2[j, 1] == 'Transitional'){ col_vect2[j] <- 'brown'}
if(dat_col2[j, 1] == 'Deep Water'){ col_vect2[j] <- 'darkblue'}
if(dat_col2[j, 1] == 'Shallow Water'){ col_vect2[j] <- 'lightblue'}
if(dat_col2[j, 1] == 'Vegetation'){ col_vect2[j] <- 'lightgreen'}
if(dat_col2[j, 1] == 'Harbour'){ col_vect2[j] <- 'pink'}
}
# plot the land use data
layout(matrix(1,1))
plot(samp, col=col_vect2,main="Land use classification of Malé-Hulhumale",cex.main=0.9)
legend('bottomleft', legend=unique(dat_col2), fill = unique(col_vect2), cex=0.8, lty=1, lwd=3, bty='n')
# extract the values of each raster layer (i.e. each band) of male_crop which fall inside samp polygons and store them in the variable df:
df <- extract(male_crop, samp)
# explore the new variable df
str(df)
View(df)
df
# use the function 'rbind' to combine all dataframes (of all polygons)'
df <- as.data.frame(Reduce(rbind, df))
# now explore the structure again
str(df)
head(df)
# create an empty data frame (think a table) called ms to store the mean spectra
ms <- as.data.frame(matrix(0, nrow = length(unique(samp$Legend_S2)), ncol = nlayers(male_crop)))
#the row names are taken from the samp object
rownames(ms) <- as.character(unique(samp$Legend_S2))
#the column names are taken from the df object
colnames(ms) <- colnames(df)
# store the mean spectra for each classification in the data frame ms
for (i in unique(samp$Legend_S2)){
x <- df[samp$Legend_S2==i,]
# here the mean values are calculated
ms[i,] <- colMeans(x)
}
# create a colour vector for the different land-use categories
mycolor <- c('lightgrey', 'darkgrey', 'orange', 'pink', 'red', 'gold', 'lightblue', 'darkblue', 'darkgreen')
# visualize the spectral profile
for (i in 1:nrow(ms)){
if(i == 1){
# plot the first spectra
plot(factor(colnames(ms), levels=colnames(ms)), as.vector(as.character(ms[i,])), type = "l", lwd = 3, lty = 1, col = mycolor[i], ylim=c(5000, 15000), xlim=c(1, 6), xlab='Bands', ylab='Reflectance', xaxt='n',main='spectral profile from Landsat 8', font.main =2)
axis(1, at=1:6, lab=colnames(ms))
}else{
# add the other spectra using the function 'lines'
lines(factor(colnames(ms), levels=colnames(ms)), as.vector(as.character(ms[i,])), type = "o", lwd = 3, lty = 1, col = mycolor[i])
if(i == nrow(ms)){
legend('bottomleft', rownames(ms), cex=0.8, col=mycolor, lty=1, lwd=3, bty='n')
}
}
}
male_hulhumale <- brick("./downloaded-files/land_use_maldives_2019_08_08/rasterfiles/landsat8_2013may_male_hulhumale.tif")
names(male_hulhumale) <- c('blue', 'green', 'red', 'NIR', 'SWIR1', 'SWIR2')
# extract the NIR band
rr <- male_hulhumale[['NIR']]
nr.df <- as.data.frame(rr, xy=T)
# eliminate empty data
nr.df <- nr.df[complete.cases(nr.df$NIR),]
# after the preparations above we can now run the k means algorithm:
set.seed(1)
nr.km <- kmeans(nr.df$NIR, centers = 9, #here we define that we want 9 centers / categories
iter.max = 500, nstart = 3, algorithm="Lloyd")
View(nr.df)
View(nr.km)
# add the clusters identified by the kmeans algorithm to the new column 'cluster' of your dataframe
nr.df$cluster <- nr.km$cluster
View(nr.df)
# create a new raster identifying each pixel by the assigned clusters
nr.raster <- rasterFromXYZ(cbind(nr.df[, c('x', 'y', 'cluster')]), res=res(rr), crs=crs(rr))
# visualise the new raster with the clusters identified by 9 different colors
plot(nr.raster, col= c('red', 'pink', 'yellow', 'lightblue', 'darkblue', 'grey', 'green','orange','gold'), main = 'Unsupervised Classification - NIR')
# Read in the raster files for the different years
male_hulhumale_2018 <- brick("./downloaded-files/land_use_maldives_2019_08_08/rasterfiles/landsat8_2018march_male_hulhumale.tif")
male_hulhumale_2013 <- brick("./downloaded-files/land_use_maldives_2019_08_08/rasterfiles/landsat8_2013may_male_hulhumale.tif")
# Name the bands of the raster files
names(male_hulhumale_2018) <- c('blue', 'green', 'red', 'NIR', 'SWIR1', 'SWIR2')
names(male_hulhumale_2013) <- c('blue', 'green', 'red', 'NIR', 'SWIR1', 'SWIR2')
# select one band of interest, in this case select band NIR:
rr2018 <- male_hulhumale_2018[['NIR']]
rr2013 <- male_hulhumale_2013[['NIR']]
# Convert the raster into dataframes. The parameter 'xy=T' means that the coordinates of the pixels will be part of the dataframe
nr2018.df <- as.data.frame(rr2018, xy=T)
nr2013.df <- as.data.frame(rr2013, xy=T)
#Check whether there are zero values in the data frames
pos_zeros_2018 <- which(nr2018.df==0,arr.ind=TRUE)
pos_zeros_2013 <- which(nr2013.df==0,arr.ind=TRUE)
nrow(pos_zeros_2018) # result: 0
nrow(pos_zeros_2013) # result: 0
#check for missing values
nr2018.df <- nr2018.df[complete.cases(nr2018.df$NIR),]
nr2013.df <- nr2013.df[complete.cases(nr2013.df$NIR),]
## run k-means algorithm for 2013
set.seed(1)
nr2013.km <- kmeans(nr2013.df$NIR, centers = 9, iter.max = 500, nstart = 3, algorithm="Lloyd")
# add the cluster ids (identification numbers) of each pixel to the data frame
nr2013.df$cluster <- nr2013.km$cluster
# convert the data frame containing the clusters into a raster
nr2013.raster <- rasterFromXYZ(cbind(nr2013.df[, c('x', 'y', 'cluster')]), res=res(rr2013), crs=crs(rr2013))
## run k-means algorithm for 2018
set.seed(1)
nr2018.km <- kmeans(nr2018.df$NIR, centers = 9, iter.max = 500, nstart = 3, algorithm="Lloyd")
# add the cluster ids of each pixel to the dataframe
nr2018.df$cluster <- nr2018.km$cluster
# convert the dataframe containing the clusters into a raster
nr2018.raster <- rasterFromXYZ(cbind(nr2018.df[, c('x', 'y', 'cluster')]), res=res(rr2018), crs=crs(rr2018))
# adjusting the plot layout to show figures of both years side by side
par(mfrow=c(1,2))
# plotting the classification for 2013 and 2018
plot(nr2013.raster, col= c('red', 'gold', 'green', 'darkblue', 'orange', 'lightblue', 'grey','pink','brown'), main = '2013', line=0.5, cex.main=0.8)
plot(nr2018.raster, col= c('red', 'gold', 'green', 'darkblue', 'orange', 'lightblue', 'grey','pink','brown'), main = '2018', line=0.5, cex.main=0.8)
mtext("Land use classification of Malé-Hulhumale (NIR)", cex=1.25, line=2, adj=1.25)
