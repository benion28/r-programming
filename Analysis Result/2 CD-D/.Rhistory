"a" = c(
round(summary_model_1$parameters[1], 2),
round(summary_model_2$parameters[1], 2),
round(summary_model_3$parameters[1], 2),
round(summary_model_4$parameters[1], 2)
),
"b" = c(
round(summary_model_1$parameters[2], 2),
round(summary_model_2$parameters[2], 2),
round(summary_model_3$parameters[2], 2),
round(summary_model_4$parameters[2], 2)
),
"c" = c(
round(summary_model_1$parameters[3], 2),
"-",
"-",
round(summary_model_4$parameters[3], 2)
)
)
summary_model_3 <- summary(model_3)
length_model_3 <- length(summary(model_3)$coef[,1])
# Starting Values Table
starting_values_tables <- data.frame(
"a" = c(
round(summary_model_1$parameters[1], 2),
round(summary_model_2$parameters[1], 2),
round(summary_model_3$parameters[1], 2),
round(summary_model_4$parameters[1], 2)
),
"b" = c(
round(summary_model_1$parameters[2], 2),
round(summary_model_2$parameters[2], 2),
round(summary_model_3$parameters[2], 2),
round(summary_model_4$parameters[2], 2)
),
"c" = c(
round(summary_model_1$parameters[3], 2),
"-",
"-",
round(summary_model_4$parameters[3], 2)
)
)
rownames(starting_values_tables) <- c("Model 1", "Model 2", "Model 3", "Model 4")
#-------------------------------- Parameters Table -----------------------------#
# Model Parameters
parameters_nls <- data.frame(
"a" = c(
round(summary_model_1$parameters[1], 2), round(summary_model_2$parameters[1], 2),
round(summary_model_3$parameters[1], 2), round(summary_model_4$parameters[1], 2)
),
"b" = c(
round(summary_model_1$parameters[2], 2), round(summary_model_2$parameters[2], 2),
round(summary_model_3$parameters[2], 2), round(summary_model_4$parameters[2], 2)
),
"c" = c(
round(summary_model_1$parameters[3], 2), "-",
"-", round(summary_model_4$parameters[3], 2)
)
)
rownames(starting_values_tables) <- c("Model 1", "Model 2", "Model 3", "Model 4")
View(parameters_nls)
View(parameters_nls)
summary_model_4$parameters[3]
round(summary_model_4$parameters[3], 2)
round(summary_model_4$parameters[3], 4)
"-", round(summary_model_4$parameters[3], 3)
round(summary_model_4$parameters[3], 3)
round(summary_model_1$parameters[3], 3)
View(parameters_nls)
rownames(starting_values_tables) <- c("Model 1", "Model 2", "Model 3", "Model 4")
View(parameters_nls)
colnames(starting_values_tables) <- c("Model 1", "Model 2", "Model 3", "Model 4")
rownames(parameters_nls) <- c("Model 1", "Model 2", "Model 3", "Model 4")
View(parameters_nls)
# Model Comparison Frame
prediction_frame_training <- data.frame(
"Real Values"=training$CROWN.DIAMETER,
"Model 1_Predictions"=round(predictions_model_1_training, 1),
"Model 2_Predictions"=round(predictions_model_2_training, 1),
"Model 3_Predictions"=round(predictions_model_3_training, 1),
"Model 4_Predictions"=round(predictions_model_4_training, 1)
)
prediction_frame_testing <- data.frame(
"Real Values"=testing$CROWN.DIAMETER,
"Model 1_Predictions"=round(predictions_model_1_testing, 1),
"Model 2_Predictions"=round(predictions_model_2_testing, 1),
"Model 3_Predictions"=round(predictions_model_3_testing, 1),
"Model 4_Predictions"=round(predictions_model_4_testing, 1)
)
# Summary Table
summary_table_training <- data.frame()
summary_table_testing <- data.frame()
# ---------------------- Manual Predictions -------------------------------#
predictor_variable <- data.frame(DIAMETER = 20.4)
# Summary Table
summary_table_training <- data.frame()
summary_table_testing <- data.frame()
# ---------------------- Manual Predictions -------------------------------#
predictor_variable <- data.frame(DIAMETER = 20.4)
# ---------------------- Manual Predictions -------------------------------#
predictor_variable <- data.frame(DIAMETER = 20.4)
# Model 1
predict_model_1 <- predict(model_1, predictor_variable)
# Model 2
predict_model_2 <- predict(model_2, predictor_variable)
# Model 3
predict_model_3 <- predict(model_3, predictor_variable)
# Model 4
predict_model_4 <- predict(model_4, predictor_variable)
# ---------------------- Manual Predictions -------------------------------#
predictor_variable <- data.frame(DIAMETER = 21.6)
# Model 1
predict_model_1 <- predict(model_1, predictor_variable)
# Model 2
predict_model_2 <- predict(model_2, predictor_variable)
# Model 3
predict_model_3 <- predict(model_3, predictor_variable)
# Model 4
predict_model_4 <- predict(model_4, predictor_variable)
# Predict Table
predict_table <- data.frame(
"DIAMETER" = predictor_variable$DIAMETER,
"CROWN.DIAMETER" = 13.2,
"Model 1" = round(predict_model_1, 1),
"Model 2" = round(predict_model_2, 1),
"Model 3" = round(predict_model_3, 1),
"Model 4" = round(predict_model_4, 1)
)
#-------------------------------- Parameters Table -----------------------------#
# NLS Parameters
parameters_nls <- data.frame(
"a" = c(
round(summary_model_1$parameters[1], 2), round(summary_model_2$parameters[1], 2),
round(summary_model_3$parameters[1], 2), round(summary_model_4$parameters[1], 2)
),
"b" = c(
round(summary_model_1$parameters[2], 2), round(summary_model_2$parameters[2], 2),
round(summary_model_3$parameters[2], 2), round(summary_model_4$parameters[2], 2)
),
"c" = c(
round(summary_model_1$parameters[3], 3), "-",
"-", round(summary_model_4$parameters[3], 3)
)
)
rownames(parameters_nls) <- c("Model 1", "Model 2", "Model 3", "Model 4")
View(predict_table)
#----------------------------- Model Evaluation -----------------------------#
# Root Mean Squared Errors
# Training
RMSE_model_1_training <- rmse(training$CROWN.DIAMETER, predictions_model_1_training)
RMSE_model_2_training <- rmse(training$CROWN.DIAMETER, predictions_model_2_training)
RMSE_model_3_training <- rmse(training$CROWN.DIAMETER, predictions_model_3_training)
RMSE_model_4_training <- rmse(training$CROWN.DIAMETER, predictions_model_4_training)
#----------------------------- Model Evaluation -----------------------------#
# Root Mean Squared Errors
# Training
RMSE_model_1_training <- rmse(training$CROWN.DIAMETER, predictions_model_1_training)
RMSE_model_2_training <- rmse(training$CROWN.DIAMETER, predictions_model_2_training)
RMSE_model_3_training <- rmse(training$CROWN.DIAMETER, predictions_model_3_training)
RMSE_model_4_training <- rmse(training$CROWN.DIAMETER, predictions_model_4_training)
RMSE_training <- c(
round(RMSE_model_1_training, 3),
round(RMSE_model_2_training, 3),
round(RMSE_model_3_training, 3),
round(RMSE_model_4_training, 3)
)
summary_table_training <- data.frame("RMSE" = RMSE_training)
View(summary_table_training)
View(summary_table_training)
View(summary_table_training)
#----------------------------- Model Validation -----------------------------#
# Root Mean Squared Errors
# Testing
RMSE_model_1_testing <- rmse(training$CROWN.DIAMETER, predictions_model_1_testing)
#----------------------------- Model Validation -----------------------------#
# Root Mean Squared Errors
# Testing
RMSE_model_1_testing <- rmse(testing$CROWN.DIAMETER, predictions_model_1_testing)
RMSE_model_2_testing <- rmse(testing$CROWN.DIAMETER, predictions_model_2_testing)
RMSE_model_3_testing <- rmse(testing$CROWN.DIAMETER, predictions_model_3_testing)
RMSE_model_4_testing <- rmse(testing$CROWN.DIAMETER, predictions_model_4_testing)
RMSE_testing <- c(
round(RMSE_model_1_testing, 3),
round(RMSE_model_2_testing, 3),
round(RMSE_model_3_testing, 3),
round(RMSE_model_4_testing, 3)
)
summary_table_testing <- data.frame("RMSE" = RMSE_testing)
View(testing)
View(summary_table_training)
#----------------------------- Model Evaluation -----------------------------#
# Calculate RSCORE
#Training
RSQUARED_model_1_training <- cor(training$CROWN.DIAMETER, predictions_model_1_training)^2 # Correlation Coefficient
RSQUARED_model_2_training <- cor(training$CROWN.DIAMETER, predictions_model_2_training)^2 # Correlation Coefficient
RSQUARED_model_3_training <- cor(training$CROWN.DIAMETER, predictions_model_3_training)^2 # Correlation Coefficient
RSQUARED_model_4_training <- cor(training$CROWN.DIAMETER, predictions_model_4_training)^2 # Correlation Coefficient
RSQUARED_training <- c(
round(RSQUARED_model_1_training, 3),
round(RSQUARED_model_2_training, 3),
round(RSQUARED_model_3_training, 3),
round(RSQUARED_model_4_training, 3)
)
summary_table_training <- cbind(summary_table_training, "RSQUARED" = RSQUARED_training)
#----------------------------- Model Validation -----------------------------#
# Calculate RSCORE
# Testing
RSQUARED_model_1_testing <- cor(testing$CROWN.DIAMETER, predictions_model_1_testing)^2 # Correlation Coefficient
RSQUARED_model_2_testing <- cor(testing$CROWN.DIAMETER, predictions_model_2_testing)^2 # Correlation Coefficient
RSQUARED_model_3_testing <- cor(testing$CROWN.DIAMETER, predictions_model_3_testing)^2 # Correlation Coefficient
RSQUARED_model_4_testing <- cor(testing$CROWN.DIAMETER, predictions_model_4_testing)^2 # Correlation Coefficient
RSQUARED_testing <- c(
round(RSQUARED_power_testing, 3),
round(RSQUARED_curtis_testing, 3),
round(RSQUARED_logistics_testing, 3),
round(RSQUARED_naslund_testing, 3)
)
RSQUARED_testing <- c(
round(RSQUARED_model_1_testing, 3),
round(RSQUARED_model_2_testing, 3),
round(RSQUARED_model_3_testing, 3),
round(RSQUARED_model_4_testing, 3)
)
summary_table_testing <- cbind(summary_table_testing, "RSQUARED" = RSQUARED_testing)
#----------------------------- Model Evaluation -----------------------------#
# Mean Absolute Percent Error (MAPE)
# Training
MAPE_model_1_training <- mape(training$CROWN.DIAMETER, predictions_model_1_training)
MAPE_model_2_training <- mape(training$CROWN.DIAMETER, predictions_model_2_training)
MAPE_model_3_training <- mape(training$CROWN.DIAMETER, predictions_model_3_training)
MAPE_model_4_training <- mape(training$CROWN.DIAMETER, predictions_model_4_training)
MAPE_training <- c(
round(MAPE_model_1_training, 3),
round(MAPE_model_2_training, 3),
round(MAPE_model_3_training, 3),
round(MAPE_model_4_training, 3)
)
summary_table_training <- cbind(summary_table_training, "MAPE" = MAPE_training)
#----------------------------- Model Validation -----------------------------#
# Mean Absolute Percent Error (MAPE)
# Testing
MAPE_model_1_testing <- mape(testing$CROWN.DIAMETER, predictions_model_1_testing)
MAPE_model_2_testing <- mape(testing$CROWN.DIAMETER, predictions_model_2_testing)
MAPE_model_3_testing <- mape(testing$CROWN.DIAMETER, predictions_model_3_testing)
MAPE_model_4_testing <- mape(testing$CROWN.DIAMETER, predictions_model_4_testing)
MAPE_testing <- c(
round(MAPE_model_1_testing, 3),
round(MAPE_model_2_testing, 3),
round(MAPE_model_3_testing, 3),
round(MAPE_model_4_testing, 3)
)
summary_table_testing <- cbind(summary_table_testing, "MAPE" = MAPE_testing)
#----------------------------- Model Evaluation -----------------------------#
# BIAS
# Training
bias_model_1_training <- bias(training$CROWN.DIAMETER, predictions_model_1_training)
bias_model_2_training <- bias(training$CROWN.DIAMETER, predictions_model_2_training)
bias_model_3_training <- bias(training$CROWN.DIAMETER, predictions_model_3_training)
bias_model_4_training <- bias(training$CROWN.DIAMETER, predictions_model_4_training)
BIAS_training <- c(
round(bias_model_1_training, 3),
round(bias_model_2_training, 3),
round(bias_model_3_training, 3),
round(bias_model_4_training, 3)
)
summary_table_training <- cbind(summary_table_training, "BIAS" = BIAS_training)
#----------------------------- Model Validation -----------------------------#
# BIAS
# Testing
bias_model_1_testing <- bias(testing$CROWN.DIAMETER, predictions_power_testing)
bias_model_2_testing <- bias(testing$CROWN.DIAMETER, predictions_curtis_testing)
bias_model_3_testing <- bias(testing$CROWN.DIAMETER, predictions_logistics_testing)
#----------------------------- Model Validation -----------------------------#
# BIAS
# Testing
bias_model_1_testing <- bias(testing$CROWN.DIAMETER, predictions_model_1_testing)
bias_model_2_testing <- bias(testing$CROWN.DIAMETER, predictions_model_2_testing)
bias_model_3_testing <- bias(testing$CROWN.DIAMETER, predictions_model_3_testing)
bias_model_4_testing <- bias(testing$CROWN.DIAMETER, predictions_model_4_testing)
BIAS_testing <- c(
round(bias_model_1_testing, 3),
round(bias_model_2_testing, 3),
round(bias_model_3_testing, 3),
round(bias_model_4_testing, 3)
)
summary_table_testing <- cbind(summary_table_testing, "BIAS" = BIAS_testing)
#----------------------------- Model Evaluation -----------------------------#
# Mean Absolute Error (MAE)
# Training
MAE_model_1_training <- mae(training$CROWN.DIAMETER, predictions_model_1_training)
MAE_model_2_training <- mae(training$CROWN.DIAMETER, predictions_model_2_training)
MAE_model_3_training <- mae(training$CROWN.DIAMETER, predictions_model_3_training)
MAE_model_4_training <- mae(training$CROWN.DIAMETER, predictions_model_4_training)
MAE_training <- c(
round(MAE_model_1_training, 3),
round(MAE_model_2_training, 3),
round(MAE_model_3_training, 3),
round(MAE_model_4_training, 3)
)
summary_table_training <- cbind(summary_table_training, "MAE" = MAE_training)
#----------------------------- Model Validation -----------------------------#
# Mean Absolute Error (MAE)
# Testing
MAE_model_1_testing <- mae(testing$CROWN.DIAMETER, predictions_model_1_testing)
MAE_model_2_testing <- mae(testing$CROWN.DIAMETER, predictions_model_2_testing)
MAE_model_3_testing <- mae(testing$CROWN.DIAMETER, predictions_model_3_testing)
MAE_model_4_testing <- mae(testing$CROWN.DIAMETER, predictions_model_4_testing)
MAE_testing <- c(
round(MAE_model_1_testing, 3),
round(MAE_model_2_testing, 3),
round(MAE_model_3_testing, 3),
round(MAE_model_4_testing, 3)
)
summary_table_testing <- cbind(summary_table_testing, "MAE" = MAE_testing)
#----------------------------- Model Evaluation -----------------------------#
# Calculate AIC
AIC_model_1 <- AIC(model_1)
AIC_model_2 <- AIC(model_2)
AIC_model_3 <- AIC(model_3)
AIC_model_4 <- AIC(model_4)
AIC <- c(
round(AIC_model_1, 3),
round(AIC_model_2, 3),
round(AIC_model_3, 3),
round(AIC_model_4, 3)
)
summary_table_training <- cbind(summary_table_training, AIC)
#----------------------------- Model Validation -----------------------------#
summary_table_testing <- cbind(summary_table_testing, AIC)
# calculate BIC
BIC_power <- BIC(model_1)
# calculate BIC
BIC_model_1 <- BIC(model_1)
BIC_model_2 <- BIC(model_2)
BIC_model_3 <- BIC(model_3)
BIC_model_4 <- BIC(model_4)
BIC <- c(
round(BIC_model_1, 2),
round(BIC_model_2, 2),
round(BIC_model_3, 2),
round(BIC_model_4, 2)
)
summary_table_training <- cbind(summary_table_training, BIC)
#----------------------------- Model Validation -----------------------------#
summary_table_testing <- cbind(summary_table_testing, BIC)
#----------------------------- Model Evaluation -----------------------------#
# Accuracy
# Training
accuracy_model_1_training <- accuracy(training$CROWN.DIAMETER, prediction_frame_training$Model.1_Predictions)
accuracy_model_2_training <- accuracy(training$CROWN.DIAMETER, prediction_frame_training$Model.2_Predictions)
accuracy_model_3_training <- accuracy(training$CROWN.DIAMETER, prediction_frame_training$Model.3_Predictions)
accuracy_model_4_training <- accuracy(training$CROWN.DIAMETER, prediction_frame_training$Model.4_Predictions)
accuracy_training <- c(
round((accuracy_model_1_training * 100), 2),
round((accuracy_model_2_training * 100), 2),
round((accuracy_model_3_training * 100), 2),
round((accuracy_model_4_training * 100), 2)
)
summary_table_training <- cbind(summary_table_training, "Accuracy(%)" = accuracy_training)
#----------------------------- Model Evaluation -----------------------------#
# Accuracy
# Training
accuracy_model_1_training <- accuracy(training$CROWN.DIAMETER, prediction_frame_training$Model.1_Predictions)
accuracy_model_2_training <- accuracy(training$CROWN.DIAMETER, prediction_frame_training$Model.2_Predictions)
accuracy_model_3_training <- accuracy(training$CROWN.DIAMETER, prediction_frame_training$Model.3_Predictions)
accuracy_model_4_training <- accuracy(training$CROWN.DIAMETER, prediction_frame_training$Model.4_Predictions)
accuracy_training <- c(
round((accuracy_model_1_training * 100), 2),
round((accuracy_model_2_training * 100), 2),
round((accuracy_model_3_training * 100), 2),
round((accuracy_model_4_training * 100), 2)
)
summary_table_training <- cbind(summary_table_training, "Accuracy(%)" = accuracy_training)
#----------------------------- Model Validation -----------------------------#
# Accuracy
# Testing
accuracy_model_1_testing <- accuracy(testing$CROWN.DIAMETER, prediction_frame_testing$Model.1_Predictions)
accuracy_model_2_testing <- accuracy(testing$CROWN.DIAMETER, prediction_frame_testing$Model.2_Predictions)
accuracy_model_3_testing <- accuracy(testing$CROWN.DIAMETER, prediction_frame_testing$Model.3_Predictions)
accuracy_model_3_testing <- accuracy(testing$CROWN.DIAMETER, prediction_frame_testing$Model.3_Predictions)
accuracy_model_4_testing <- accuracy(testing$CROWN.DIAMETER, prediction_frame_testing$Model.4_Predictions)
accuracy_testing <- c(
round((accuracy_model_1_testing * 100), 2),
round((accuracy_model_2_testing * 100), 2),
round((accuracy_model_3_testing * 100), 2),
round((accuracy_model_4_testing * 100), 2)
)
summary_table_testing <- cbind(summary_table_testing, "Accuracy(%)" = accuracy_testing)
summary_table_testing <- cbind(summary_table_testing, "Accuracy(%)" = accuracy_testing)
rownames(summary_table_training) <- c("Model 1", "Model 2", "Model 3", "Model 4")
rownames(summary_table_testing) <- c("Model 1", "Model 2", "Model 3", "Model 4")
View(summary_table_testing)
View(summary_table_testing)
View(summary_table_testing)
View(summary_table_training)
View(summary_table_testing)
# Scattered Plot (Model Performance Line/Curve)
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$CROWN.DIAMETER, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_1_training, colour = "Model 1")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_2_training, colour = "Model 2")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_3_training, colour = "Model 3")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_4_training, colour = "Model 4")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Crown Diameter - Diameter Model Lines", color = "Legend") +
theme(legend.position = c(0.90, 0.02), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c(
"Points"="#9b2339",
"Model 1"="#0f0f10",
"Model 2"="#eb7de3",
"Model 3"="#eb1919",
"Model 4"="#c9b424"
))
# Scattered Plot (Model Performance Line/Curve)
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$CROWN.DIAMETER, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_1_training, colour = "Model 1")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_2_training, colour = "Model 2")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_3_training, colour = "Model 3")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_4_training, colour = "Model 4")) +
labs(x = "Diameter (cm)", y = "Crown Diameter (m)", title = "Tree Crown Diameter - Diameter Model Lines", color = "Legend") +
theme(legend.position = c(0.90, 0.02), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c(
"Points"="#9b2339",
"Model 1"="#0f0f10",
"Model 2"="#eb7de3",
"Model 3"="#eb1919",
"Model 4"="#c9b424"
))
View(summary_table_training)
# Model Residuals Table
residuals_table <- data.frame(
"Model 1" = residuals(model_1),
"Model 2" = residuals(model_2),
"Model 3" = residuals(model_3),
"Model 4" = residuals(model_4)
)
View(residuals_table)
# Scattered Plot (Model Performance Line) -- Model 1
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$CROWN.DIAMETER, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_1_training, colour = "Model 1")) +
labs(x = "Diameter (cm)", y = "Crown Diameter (m)", title = "Tree Crown Diameter - Diameter Model Line (Model 1)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Model 1"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Model 2
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$CROWN.DIAMETER, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_2_training, colour = "Model 2")) +
labs(x = "Diameter (cm)", y = "Crown Diameter (m)", title = "Tree Crown Diameter - Diameter Model Curve (Model 2)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Model 2"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Model 3
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$CROWN.DIAMETER, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_3_training, colour = "Model 3")) +
labs(x = "Diameter (cm)", y = "Crown Diameter (m)", title = "Tree Crown Diameter - Diameter Model Curve (Model 3)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Model 3"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Model 4
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$CROWN.DIAMETER, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_4_training, colour = "Model 4")) +
labs(x = "Diameter (cm)", y = "Crown Diameter (m)", title = "Tree Crown Diameter - Diameter Model Curve (Naslund)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Model 4"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Model 4
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$CROWN.DIAMETER, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_4_training, colour = "Model 4")) +
labs(x = "Diameter (cm)", y = "Crown Diameter (m)", title = "Tree Crown Diameter - Diameter Model Curve (Model 4)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Model 4"="#120c4c"))
# Scattered Plot (Fitted VS Residuals Values) -- Model 1
ggplot() +
geom_point(aes(x = fitted(model_1), y = residuals(model_1), colour = "Points")) +
geom_abline(aes(slope=0, intercept=0, colour = "Model 1")) +
labs(x = "Fitted Values", y = "Standardized Residuals", title = "Tree Crown Diameter - Diameter -- Fitted vs Residuals (Model 1)", color = "Legend") +
theme(legend.position = c(0.75, 0.70), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Model 1"="#4954ed"))
plot(model_1, col = "black",
main = "Tree H-D Fitted VS Residuals Values -- Model 1",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Fitted VS Residuals Values) -- Model 4
ggplot() +
geom_point(aes(x = fitted(model_4), y = residuals(model_4), colour = "Points")) +
geom_abline(aes(slope=0, intercept=0, colour = "Model 4")) +
labs(x = "Fitted Values", y = "Standardized Residuals", title = "Tree Crown Diameter - Diameter -- Fitted vs Residuals (Model 4)", color = "Legend") +
theme(legend.position = c(0.75, 0.70), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Model 4"="#4954ed"))
plot(model_4, col = "black",
main = "Tree H-D Fitted VS Residuals Values -- Model 4",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Standardized Normal Quantile vs Standardized Residuals) -- Model 1
ggplot(residuals_table, aes(sample = Model.1)) +
geom_qq(color = "#a32e2e") +
geom_qq_line(color = "#4954ed") +
labs(x = "Quantiles of Standardized Normal", y = "Standardized Residuals", title = "Tree CD-D Standardized Normal Quantile vs Residuals (Model 1)")
qqnorm(residuals(model_1, type = "pearson"),
main = "Tree H-D Standardized Normal Quantile vs Standardized Residuals -- Model 1",
xlab = "Standardized Normal Quantile", ylab = "Standardized Residuals")
qqline(residuals(model_1,type = "pearson"))
# Scattered Plot (Standardized Normal Quantile vs Standardized Residuals) -- Model 4
ggplot(residuals_table, aes(sample = Model.4)) +
geom_qq(color = "#a32e2e") +
geom_qq_line(color = "#4954ed") +
labs(x = "Quantiles of Standardized Normal", y = "Standardized Residuals", title = "Tree CD-D Standardized Normal Quantile vs Residuals (Model 4)")
qqnorm(residuals(model_4, type = "pearson"),
main = "Tree H-D Standardized Normal Quantile vs Standardized Residuals -- Model 4",
xlab = "Standardized Normal Quantile", ylab = "Standardized Residuals")
qqline(residuals(model_4,type = "pearson"))
