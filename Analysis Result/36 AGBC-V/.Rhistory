BIAS_training <- c(
round(bias_model_chapman_training, 3),
round(bias_model_weibull_training, 3),
round(bias_model_power_training, 3),
round(bias_model_korf_training, 3),
round(bias_model_prodan_training, 3),
round(bias_model_logistic_training, 3),
round(bias_model_hossfeldIV_training, 3),
round(bias_model_ratkowsky_training, 3)
)
summary_table_training <- cbind(summary_table_training, "BIAS" = BIAS_training)
#----------------------------- Model Validation -----------------------------#
# BIAS
# Testing
bias_model_chapman_testing <- bias(testing$HEIGHT, predictions_model_chapman_testing)
bias_model_weibull_testing <- bias(testing$HEIGHT, predictions_model_weibull_testing)
bias_model_power_testing <- bias(testing$HEIGHT, predictions_model_power_testing)
bias_model_korf_testing <- bias(testing$HEIGHT, predictions_model_korf_testing)
bias_model_prodan_testing <- bias(testing$HEIGHT, predictions_model_prodan_testing)
bias_model_logistic_testing <- bias(testing$HEIGHT, predictions_model_logistic_testing)
bias_model_hossfeldIV_testing <- bias(testing$HEIGHT, predictions_model_hossfeldIV_testing)
bias_model_ratkowsky_testing <- bias(testing$HEIGHT, predictions_model_ratkowsky_testing)
BIAS_testing <- c(
round(bias_model_chapman_testing, 3),
round(bias_model_weibull_testing, 3),
round(bias_model_power_testing, 3),
round(bias_model_korf_testing, 3),
round(bias_model_prodan_testing, 3),
round(bias_model_logistic_testing, 3),
round(bias_model_hossfeldIV_testing, 3),
round(bias_model_ratkowsky_testing, 3)
)
summary_table_testing <- cbind(summary_table_testing, "BIAS" = BIAS_testing)
#----------------------------- Model Evaluation -----------------------------#
# Calculate AIC
AIC_model_chapman <- AIC(model_chapman)
AIC_model_weibull <- AIC(model_weibull)
AIC_model_power <- AIC(model_power)
AIC_model_korf <- AIC(model_korf)
AIC_model_prodan <- AIC(model_prodan)
AIC_model_logistic <- AIC(model_logistic)
AIC_model_hossfeldIV <- AIC(model_hossfeldIV)
AIC_model_ratkowsky <- AIC(model_ratkowsky)
AIC <- c(
round(AIC_model_chapman, 3),
round(AIC_model_weibull, 3),
round(AIC_model_power, 3),
round(AIC_model_korf, 3),
round(AIC_model_prodan, 3),
round(AIC_model_logistic, 3),
round(AIC_model_hossfeldIV, 3),
round(AIC_model_ratkowsky, 3)
)
summary_table_training <- cbind(summary_table_training, AIC)
#----------------------------- Model Validation -----------------------------#
summary_table_testing <- cbind(summary_table_testing, AIC)
rownames(summary_table_training) <- models_names
rownames(summary_table_testing) <- models_names
# Scattered Plot (Model Performance Line/Curve)
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_chapman_training, colour = "Chapman")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_weibull_training, colour = "Weibull")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_power_training, colour = "Power")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_korf_training, colour = "Korf")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_prodan_training, colour = "Prodan")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_logistic_training, colour = "Logistic")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_hossfeldIV_training, colour = "Hossfeld IV")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_ratkowsky_training, colour = "Ratkowsky")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Height - Diameter Model Lines", color = "Legend") +
theme(legend.position = c(0.98, 0.02), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c(
"Points"="#9b2339",
"Chapman"="#0f0f10",
"Weibull"="#eb7de3",
"Power"="#eb1919",
"Korf"="#c9b424",
"Prodan"="#2533d3",
"Logistic"="#69ef79",
"Hossfeld IV"="#880373",
"Ratkowsky"="#085b5b"
))
# Model Residuals Table
residuals_table <- data.frame(
"Chapman" = residuals(model_chapman),
"Weibull" = residuals(model_weibull),
"Power" = residuals(model_power),
"Korf" = residuals(model_korf),
"Prodan" = residuals(model_prodan),
"Logistics" = residuals(model_logistic),
"Hossfeld_IV" = residuals(model_hossfeldIV),
"Ratkowsky" = residuals(model_ratkowsky)
)
# Scattered Plot (Model Performance Line) -- Chapman
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_chapman_training, colour = "Chapman")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Height - Diameter Model Line (Chapman)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Chapman"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Weibull
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_weibull_training, colour = "Weibull")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Height - Diameter Model Curve (Weibull)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Weibull"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Power
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_power_training, colour = "Power")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Height - Diameter Model Curve (Power)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Power"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Korf
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_korf_training, colour = "Korf")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Height - Diameter Model Curve (Korf)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Korf"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Prodan
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_prodan_training, colour = "Prodan")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Height - Diameter Model Curve (Prodan)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Prodan"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Logistics
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_logistic_training, colour = "Logistics")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Height - Diameter Model Curve (Logistics)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Logistics"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Hossfeld IV
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_hossfeldIV_training, colour = "Hossfeld IV")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Height - Diameter Model Curve (Hossfeld IV)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Hossfeld IV"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Ratkowsky
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_model_ratkowsky_training, colour = "Ratkowsky")) +
labs(x = "Diameter (cm)", y = "Height (m)", title = "Tree Height - Diameter Model Curve (Ratkowsky)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Ratkowsky"="#120c4c"))
# Scattered Plot (Fitted VS Residuals Values) -- Weibull
ggplot() +
geom_point(aes(x = fitted(model_weibull), y = residuals(model_weibull), colour = "Points")) +
geom_abline(aes(slope=0, intercept=0, colour = "Weibull")) +
labs(x = "Fitted Values", y = "Standardized Residuals", title = "Tree Height - Diameter -- Fitted vs Residuals (Weibull)", color = "Legend") +
theme(legend.position = c(0.99, 0.05), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Weibull"="#4954ed"))
plot(model_weibull, col = "black",
main = "Tree H-D Fitted VS Residuals Values -- Weibull",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Fitted VS Residuals Values) -- Logistic
ggplot() +
geom_point(aes(x = fitted(model_logistic), y = residuals(model_logistic), colour = "Points")) +
geom_abline(aes(slope=0, intercept=0, colour = "Logistic")) +
labs(x = "Fitted Values", y = "Standardized Residuals", title = "Tree Height - Diameter -- Fitted vs Residuals (Logistic)", color = "Legend") +
theme(legend.position = c(0.99, 0.05), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Logistic"="#4954ed"))
plot(model_logistic, col = "black",
main = "Tree H-D Fitted VS Residuals Values -- Logistic",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Standardized Normal Quantile vs Standardized Residuals) -- Weibull
ggplot(residuals_table, aes(sample = Weibull)) +
geom_qq(color = "#a32e2e") +
geom_qq_line(color = "#4954ed") +
labs(x = "Quantiles of Standardized Normal", y = "Standardized Residuals", title = "Tree H-D Standardized Normal Quantile vs Residuals (Weibull)")
qqnorm(residuals(model_weibull, type = "pearson"),
main = "Tree H-D Standardized Normal Quantile vs Standardized Residuals -- Weibull",
xlab = "Standardized Normal Quantile", ylab = "Standardized Residuals")
qqline(residuals(model_weibull,type = "pearson"))
# Scattered Plot (Standardized Normal Quantile vs Standardized Residuals) -- Logistic
ggplot(residuals_table, aes(sample = Logistics)) +
geom_qq(color = "#a32e2e") +
geom_qq_line(color = "#4954ed") +
labs(x = "Quantiles of Standardized Normal", y = "Standardized Residuals", title = "Tree H-D Standardized Normal Quantile vs Residuals (Logistic)")
qqnorm(residuals(model_logistic, type = "pearson"),
main = "Tree H-D Standardized Normal Quantile vs Standardized Residuals -- Logistic",
xlab = "Standardized Normal Quantile", ylab = "Standardized Residuals")
qqline(residuals(model_logistic,type = "pearson"))
#------------------------------ Number of Trees per Hectar --------------------------------#
one_ha_m2 <- 10000
area_of_plot_m2 <- 20 * 20
area_of_plot_ha <- area_of_plot_m2 / one_ha_m2
number_of_plots <- 15
expansion_factor <- one_ha_m2 / (area_of_plot_m2 * number_of_plots)
# Diameter Classes
class_1_5_dbh <- dataset %>% filter(DIAMETER > 1 & DIAMETER <= 5)
class_5_10_dbh <- dataset %>% filter(DIAMETER > 5 & DIAMETER <= 10)
class_10_15_dbh <- dataset %>% filter(DIAMETER > 10 & DIAMETER <= 15)
class_15_20_dbh <- dataset %>% filter(DIAMETER > 15 & DIAMETER <= 20)
class_20_25_dbh <- dataset %>% filter(DIAMETER > 20 & DIAMETER <= 25)
class_25_dbh <- dataset %>% filter(DIAMETER > 25)
# Height Classes
class_1_5_tht <- dataset %>% filter(HEIGHT > 1 & HEIGHT <= 5)
class_5_10_tht <- dataset %>% filter(HEIGHT > 5 & HEIGHT <= 10)
class_10_15_tht <- dataset %>% filter(HEIGHT > 10 & HEIGHT <= 15)
class_15_20_tht <- dataset %>% filter(HEIGHT > 15 & HEIGHT <= 20)
class_20_25_tht <- dataset %>% filter(HEIGHT > 20 & HEIGHT <= 25)
class_25_tht <- dataset %>% filter(HEIGHT > 25)
# Summary Variables Class Table
density <- area_of_plot_ha * number_of_plots
# DBH
class_1_5_dbh_density <- length(class_1_5_dbh$DIAMETER)
class_5_10_dbh_density <- length(class_5_10_dbh$DIAMETER)
class_10_15_dbh_density <- length(class_10_15_dbh$DIAMETER)
class_15_20_dbh_density <- length(class_15_20_dbh$DIAMETER)
class_20_25_dbh_density <- length(class_20_25_dbh$DIAMETER)
class_25_dbh_density <- length(class_25_dbh$DIAMETER)
# THT
class_1_5_tht_density <- length(class_1_5_tht$HEIGHT)
class_5_10_tht_density <- length(class_5_10_tht$HEIGHT)
class_10_15_tht_density <- length(class_10_15_tht$HEIGHT)
class_15_20_tht_density <- length(class_15_20_tht$HEIGHT)
class_20_25_tht_density <- length(class_20_25_tht$HEIGHT)
class_25_tht_density <- length(class_25_tht$HEIGHT)
summary_variable_classes_table <- data.frame(
"DBH.density" = c(class_1_5_dbh_density, class_5_10_dbh_density, class_10_15_dbh_density, class_15_20_dbh_density, class_20_25_dbh_density, class_25_dbh_density),
"DBH.trees.ha" = c((class_1_5_dbh_density/density), (class_5_10_dbh_density/density), (class_10_15_dbh_density/density), (class_15_20_dbh_density/density), (class_20_25_dbh_density/density), (class_25_dbh_density/density)),
"THT.density" = c(class_1_5_tht_density, class_5_10_tht_density, class_10_15_tht_density, class_15_20_tht_density, class_20_25_tht_density, class_25_tht_density),
"THT.trees.ha" = c((class_1_5_tht_density/density), (class_5_10_tht_density/density), (class_10_15_tht_density/density), (class_15_20_tht_density/density), (class_20_25_tht_density/density), (class_25_tht_density/density))
)
summary_variable_classes_table <- rbind(summary_variable_classes_table,
c(sum(summary_variable_classes_table$DBH.density), sum(summary_variable_classes_table$DBH.trees.ha),
sum(summary_variable_classes_table$THT.density), sum(summary_variable_classes_table$THT.trees.ha)
)
)
rownames(summary_variable_classes_table) <- c("1 - 5", "5 - 10", "10 - 15", "15 - 20", "20 - 25", "25>", "Total")
summary_variable_classes_table
write.csv(
summary_variable_classes_table,
file = "summary_variable_classes_table.csv",
quote = FALSE, row.names = TRUE)
write.table(
summary_variable_classes_table,
file = "summary_variable_classes_table.txt",
sep = ",", quote = FALSE, row.names = FALSE)
expansion_factor
10000 / ((20*20) * 15)
# Unload Packages
p_unload(all)
# Remove list from Global Environment
rm(list=ls())
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
#----------------------------------- START ----------------------------#
# Load Libraries
pacman::p_load(pacman, ggplot2, tidyverse, dplyr, psych)
# Set Working Directory
setwd("C://Benion//Benion Programmings//R//Analysis Result//36 AGBC-V")
# Import data set
dataset <-  read.csv("full-data-14.csv", head=TRUE, sep=",")
head(dataset, n = 10)
summary(dataset)
describe(dataset)
data_description <- describe(dataset)
unique_species_dataset <- data.frame("Unique Species"=unique(dataset$SPECIES))
unique_species_dataset
#------------------------------ Frequency Distribution -----------------------------#
# Species
species_list <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_list
species_list <- append(item, variable)
}
# Frequency
species_frequency <- c()
wood_densities <- c()
for (variable in unique_species_dataset$Unique.Species) {
item <- species_frequency
total <- length(dataset$SPECIES[dataset$SPECIES == variable])
densities <- wood_densities
wood_density <- unique(dataset$WOOD.DENSITY[dataset$SPECIES == variable])
wood_densities <- append(densities, wood_density)
species_frequency <- append(item, total)
}
# Frequency Table
frequency_table <- data.frame(
"Species" = species_list,
"Frequency" = species_frequency
)
frequency_table <- cbind(frequency_table, "Wood.Density" = wood_densities)
frequency_table <- rbind(frequency_table, "Total" = c("Total", sum(frequency_table$Frequency) , "-"))
# Basal area
m_cm <- 100
basal_area <- (pi*((dataset$DIAMETER/m_cm)^2))/4  # cm to m
dataset <- cbind(dataset, "BA" = basal_area)
# Volume
volume <- (pi/4) * (dataset$DIAMETER/m_cm)^2 * dataset$HEIGHT # cm to m
dataset <- cbind(dataset, "VOLUME" = volume)
data_description <- describe(dataset)
#------------------------------ Summary Statistic --------------------------------#
# Summary Statistic Table
summary_statistics_table <- data.frame(
"DBH" = c(round(mean(dataset$DIAMETER), 1), round(sd(dataset$DIAMETER), 1),
round(min(dataset$DIAMETER), 1), round(max(dataset$DIAMETER), 1),
length(dataset$DIAMETER)),
"THT" = c(round(mean(dataset$HEIGHT), 1), round(sd(dataset$HEIGHT), 1),
round(min(dataset$HEIGHT), 1), round(max(dataset$HEIGHT), 1),
length(dataset$HEIGHT)),
"VOL" = c(round(mean(dataset$VOLUME), 3), round(sd(dataset$VOLUME), 3),
round(min(dataset$VOLUME), 3), round(max(dataset$VOLUME), 3),
length(dataset$VOLUME)),
"BA" = c(round(mean(dataset$BA), 3), round(sd(dataset$BA), 3),
round(min(dataset$BA), 3), round(max(dataset$BA), 3),
length(dataset$BA))
)
rownames(summary_statistics_table) <- c("Mean", "Standard Deviation", "Minimum",
"Maximum", "Sample Size")
#------------------------------ Number of Trees per Hectar --------------------------------#
one_ha_m2 <- 10000
area_of_plot_m2 <- 20 * 20
area_of_plot_ha <- area_of_plot_m2 / one_ha_m2
number_of_plots <- 15
expansion_factor <- 10000 / (area_of_plot_m2 * number_of_plots)
#------------------------------ Species Distribution --------------------------------#
percentage <- 100
species_names <- unique_species_dataset$Unique.Species
species_length <- length(frequency_table$Frequency)
tree_per_ha <- expansion_factor * species_frequency
total_species <- sum(species_frequency)
total_trees_ha <- expansion_factor * total_species
species_proportion <- ((tree_per_ha/total_trees_ha) * percentage)
species_dist_table <- data.frame(
"Species" = species_names,
"Frequency" = species_frequency,
"Trees.HA" = round(tree_per_ha, 1),
"Proportion(%)" = round(species_proportion, 1)
)
species_dist_table <- rbind(species_dist_table, c("Total", sum(species_frequency), sum(tree_per_ha), sum(species_proportion)))
#------------------------------ Wood Density --------------------------------#
percentage <- 100
#------------------------------ Above Ground --------------------------------#
kg_tons <- 1000
# AGB
above_ground_biomas_kg <- 0.0673*(dataset$WOOD.DENSITY*(dataset$DIAMETER^2)*dataset$HEIGHT)^0.976
dataset <- cbind(dataset, "AGB.kg" = above_ground_biomas_kg)
above_ground_biomas_tons <- above_ground_biomas_kg / kg_tons
dataset <- cbind(dataset, "AGB.tons" = above_ground_biomas_tons)
above_ground_biomas_kg_ha <- above_ground_biomas_kg * expansion_factor
dataset <- cbind(dataset, "AGB.kg.ha" = above_ground_biomas_kg_ha)
above_ground_biomas_tons_ha <- above_ground_biomas_kg_ha / kg_tons
dataset <- cbind(dataset, "AGB.tons.ha" = above_ground_biomas_tons_ha)
# VOL
vol_m3 <- dataset$VOLUME
vol_m3_ha <- dataset$VOLUME * expansion_factor
# Summary AGB
summary_agb_table <- data.frame(
"AGB.kg" = c(round(mean(dataset$AGB.kg), 1), round(sd(dataset$AGB.kg), 1), round(min(dataset$AGB.kg), 1), round(max(dataset$AGB.kg), 1), length(dataset$AGB.kg)),
"AGB.tons" = c(round(mean(dataset$AGB.tons), 3), round(sd(dataset$AGB.tons), 3), round(min(dataset$AGB.tons), 3), round(max(dataset$AGB.tons), 3), length(dataset$AGB.tons)),
"AGB.kg.ha" = c(round(mean(dataset$AGB.kg.ha), 1), round(sd(dataset$AGB.kg.ha), 1), round(min(dataset$AGB.kg.ha), 1), round(max(dataset$AGB.kg.ha), 1), length(dataset$AGB.kg.ha)),
"AGB.tons.ha" = c(round(mean(dataset$AGB.tons.ha), 3), round(sd(dataset$AGB.tons.ha), 3), round(min(dataset$AGB.tons.ha), 3), round(max(dataset$AGB.tons.ha), 3), length(dataset$AGB.tons.ha))
)
rownames(summary_agb_table) <- c("Mean", "Standard Deviation", "Minimum", "Maximum", "Sample Size")
#AGC
above_ground_carbon_kg <- above_ground_biomas_kg * 0.47
dataset <- cbind(dataset, "AGC.kg" = above_ground_carbon_kg)
above_ground_carbon_tons <- above_ground_carbon_kg /kg_tons
dataset <- cbind(dataset, "AGC.tons" = above_ground_carbon_tons)
above_ground_carbon_kg_ha <- above_ground_biomas_kg_ha * expansion_factor
dataset <- cbind(dataset, "AGC.kg.ha" = above_ground_carbon_kg_ha)
above_ground_carbon_tons_ha <- above_ground_carbon_kg_ha /kg_tons
dataset <- cbind(dataset, "AGC.tons.ha" = above_ground_carbon_tons_ha)
# VOL
vol_m3_ha <- dataset$VOLUME * expansion_factor
dataset <- cbind(dataset, "VOL.m3.ha" = vol_m3_ha)
# Summary AGB
summary_agc_table <- data.frame(
"AGC.kg" = c(round(mean(dataset$AGC.kg), 1), round(sd(dataset$AGC.kg), 1), round(min(dataset$AGC.kg), 1), round(max(dataset$AGC.kg), 1), length(dataset$AGC.kg)),
"AGC.tons" = c(round(mean(dataset$AGC.tons), 3), round(sd(dataset$AGC.tons), 3), round(min(dataset$AGC.tons), 3), round(max(dataset$AGC.tons), 3), length(dataset$AGC.tons)),
"AGC.kg.ha" = c(round(mean(dataset$AGC.kg.ha), 1), round(sd(dataset$AGC.kg.ha), 1), round(min(dataset$AGC.kg.ha), 1), round(max(dataset$AGC.kg.ha), 1), length(dataset$AGC.kg.ha)),
"AGC.tons.ha" = c(round(mean(dataset$AGC.tons.ha), 3), round(sd(dataset$AGC.tons.ha), 3), round(min(dataset$AGC.tons.ha), 3), round(max(dataset$AGC.tons.ha), 3), length(dataset$AGC.tons.ha)),
"VOL.m3" = c(round(mean(dataset$VOLUME), 3), round(sd(dataset$VOLUME), 3), round(min(dataset$VOLUME), 3), round(max(dataset$VOLUME), 3), length(dataset$VOLUME)),
"VOL.m3.ha" = c(round(mean(dataset$VOL.m3.ha), 3), round(sd(dataset$VOL.m3.ha), 3), round(min(dataset$VOL.m3.ha), 3), round(max(dataset$VOL.m3.ha), 3), length(dataset$VOL.m3.ha))
)
rownames(summary_agc_table) <- c("Mean", "Standard Deviation", "Minimum", "Maximum", "Sample Size")
# Diameter Classes
class_1_10_dbh <- dataset %>% filter(DIAMETER > 1 & DIAMETER <= 10)
class_1_5_dbh <- dataset %>% filter(DIAMETER > 1 & DIAMETER <= 5)
class_5_10_dbh <- dataset %>% filter(DIAMETER > 5 & DIAMETER <= 10)
class_10_20_dbh <- dataset %>% filter(DIAMETER > 10 & DIAMETER <= 20)
class_10_15_dbh <- dataset %>% filter(DIAMETER > 10 & DIAMETER <= 15)
class_15_20_dbh <- dataset %>% filter(DIAMETER > 15 & DIAMETER <= 20)
class_20_25_dbh <- dataset %>% filter(DIAMETER > 20 & DIAMETER <= 25)
class_20_30_dbh <- dataset %>% filter(DIAMETER > 20 & DIAMETER <= 30)
class_25_dbh <- dataset %>% filter(DIAMETER > 25)
class_30_40_dbh <- dataset %>% filter(DIAMETER > 30 & DIAMETER <= 40)
class_40_50_dbh <- dataset %>% filter(DIAMETER > 40 & DIAMETER <= 50)
class_50_dbh <- dataset %>% filter(DIAMETER > 50)
# Height Classes
class_1_5_tht <- dataset %>% filter(HEIGHT > 1 & HEIGHT <= 5)
class_5_10_tht <- dataset %>% filter(HEIGHT > 5 & HEIGHT <= 10)
class_10_15_tht <- dataset %>% filter(HEIGHT > 10 & HEIGHT <= 15)
class_15_20_tht <- dataset %>% filter(HEIGHT > 15 & HEIGHT <= 20)
class_20_25_tht <- dataset %>% filter(HEIGHT > 20 & HEIGHT <= 25)
class_25_tht <- dataset %>% filter(HEIGHT > 25)
# Summary AG Class Table
summary_ag_classes_table <- data.frame(
"Trees.ha" = c((length(class_1_10_dbh$DIAMETER) * expansion_factor), (length(class_10_20_dbh$DIAMETER) * expansion_factor), (length(class_20_30_dbh$DIAMETER) * expansion_factor), (length(class_30_40_dbh$DIAMETER) * expansion_factor), (length(class_40_50_dbh$DIAMETER) * expansion_factor), (length(class_50_dbh$DIAMETER) * expansion_factor)),
"AGB.tons.ha" = c(round((sum(class_1_10_dbh$AGB.tons.ha) * expansion_factor), 1), round((sum(class_10_20_dbh$AGB.tons.ha) * expansion_factor), 1), round((sum(class_20_30_dbh$AGB.tons.ha) * expansion_factor), 1), round((sum(class_30_40_dbh$AGB.tons.ha) * expansion_factor), 1), round((sum(class_40_50_dbh$AGB.tons.ha) * expansion_factor), 1), round((sum(class_50_dbh$AGB.tons.ha) * expansion_factor), 1)),
"AGC.tons.ha" = c(round((sum(class_1_10_dbh$AGC.tons.ha) * expansion_factor), 1), round((sum(class_10_20_dbh$AGC.tons.ha) * expansion_factor), 1), round((sum(class_20_30_dbh$AGC.tons.ha) * expansion_factor), 1), round((sum(class_30_40_dbh$AGC.tons.ha) * expansion_factor), 1), round((sum(class_40_50_dbh$AGC.tons.ha) * expansion_factor), 1), round((sum(class_50_dbh$AGC.tons.ha) * expansion_factor), 1)),
"VOL.m3.ha" = c(round((sum(class_1_10_dbh$VOL.m3.ha)), 2), round((sum(class_10_20_dbh$VOL.m3.ha)), 2), round((sum(class_20_30_dbh$VOL.m3.ha)), 2), round((sum(class_30_40_dbh$VOL.m3.ha)), 2), round((sum(class_40_50_dbh$VOL.m3.ha)), 2), round((sum(class_50_dbh$VOL.m3.ha)), 2))
)
summary_ag_classes_table <- rbind(summary_ag_classes_table, c(sum(summary_ag_classes_table$Trees.ha), sum(summary_ag_classes_table$AGB.tons.ha), sum(summary_ag_classes_table$AGC.tons.ha), sum(summary_ag_classes_table$VOL.m3.ha)))
rownames(summary_ag_classes_table) <- c("1 - 10", "11 - 20", "21 - 30", "31 - 40", "41 - 50", "50>", "Total")
# Summary Variables Class Table
density <- area_of_plot_ha * number_of_plots
# DBH
class_1_5_dbh_density <- length(class_1_5_dbh$DIAMETER)
class_5_10_dbh_density <- length(class_5_10_dbh$DIAMETER)
class_10_15_dbh_density <- length(class_10_15_dbh$DIAMETER)
class_15_20_dbh_density <- length(class_15_20_dbh$DIAMETER)
class_20_25_dbh_density <- length(class_20_25_dbh$DIAMETER)
class_25_dbh_density <- length(class_25_dbh$DIAMETER)
# THT
class_1_5_tht_density <- length(class_1_5_tht$HEIGHT)
class_5_10_tht_density <- length(class_5_10_tht$HEIGHT)
class_10_15_tht_density <- length(class_10_15_tht$HEIGHT)
class_15_20_tht_density <- length(class_15_20_tht$HEIGHT)
class_20_25_tht_density <- length(class_20_25_tht$HEIGHT)
class_25_tht_density <- length(class_25_tht$HEIGHT)
summary_variable_classes_table <- data.frame(
"DBH.density" = c(class_1_5_dbh_density, class_5_10_dbh_density, class_10_15_dbh_density, class_15_20_dbh_density, class_20_25_dbh_density, class_25_dbh_density),
"DBH.trees.ha" = c((class_1_5_dbh_density/density), (class_5_10_dbh_density/density), (class_10_15_dbh_density/density), (class_15_20_dbh_density/density), (class_20_25_dbh_density/density), (class_25_dbh_density/density)),
"THT.density" = c(class_1_5_tht_density, class_5_10_tht_density, class_10_15_tht_density, class_15_20_tht_density, class_20_25_tht_density, class_25_tht_density),
"THT.trees.ha" = c((class_1_5_tht_density/density), (class_5_10_tht_density/density), (class_10_15_tht_density/density), (class_15_20_tht_density/density), (class_20_25_tht_density/density), (class_25_tht_density/density))
)
summary_variable_classes_table <- rbind(summary_variable_classes_table,
c(sum(summary_variable_classes_table$DBH.density), sum(summary_variable_classes_table$DBH.trees.ha),
sum(summary_variable_classes_table$THT.density), sum(summary_variable_classes_table$THT.trees.ha)
)
)
rownames(summary_variable_classes_table) <- c("1 - 5", "6 - 10", "11 - 15", "16 - 20", "21 - 25", "25>", "Total")
summary_variable_classes_table
write.csv(
dataset,
file = "dataset.csv",
quote = FALSE, row.names = TRUE)
write.table(
dataset,
file = "dataset.txt",
sep = ",", quote = FALSE, row.names = FALSE)
write.csv(
frequency_table,
file = "frequency_table.csv",
quote = FALSE, row.names = TRUE)
write.table(
frequency_table,
file = "frequency_table.txt",
sep = ",", quote = FALSE, row.names = FALSE)
write.csv(
species_dist_table,
file = "species_dist_table.csv",
quote = FALSE, row.names = TRUE)
write.table(
species_dist_table,
file = "species_dist_table.txt",
sep = ",", quote = FALSE, row.names = FALSE)
write.csv(
summary_ag_classes_table,
file = "summary_ag_classes_table.csv",
quote = FALSE, row.names = TRUE)
write.table(
summary_ag_classes_table,
file = "summary_ag_classes_table.txt",
sep = ",", quote = FALSE, row.names = FALSE)
write.csv(
summary_agb_table,
file = "summary_agb_table.csv",
quote = FALSE, row.names = TRUE)
write.table(
summary_agb_table,
file = "summary_agb_table.txt",
sep = ",", quote = FALSE, row.names = FALSE)
write.csv(
summary_agc_table,
file = "summary_agc_table.csv",
quote = FALSE, row.names = TRUE)
write.table(
summary_agc_table,
file = "summary_agc_table.txt",
sep = ",", quote = FALSE, row.names = FALSE)
write.csv(
summary_statistics_table,
file = "summary_statistics_table.csv",
quote = FALSE, row.names = TRUE)
write.table(
summary_statistics_table,
file = "summary_statistics_table.txt",
sep = ",", quote = FALSE, row.names = FALSE)
write.csv(
summary_variable_classes_table,
file = "summary_variable_classes_table.csv",
quote = FALSE, row.names = TRUE)
write.table(
summary_variable_classes_table,
file = "summary_variable_classes_table.txt",
sep = ",", quote = FALSE, row.names = FALSE)
summary_agb_table
summary_ag_classes_table
??install.packages()
