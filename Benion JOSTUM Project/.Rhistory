ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_power_training, colour = "Power")) +
labs(x = "Diameter", y = "Height", title = "Tree Height - Diameter Model Line (Power)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Power"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Chapman
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_chapman_training, colour = "Chapman")) +
labs(x = "Diameter", y = "Height", title = "Tree Height - Diameter Model Curve (Chapman)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Chapman"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Logistics
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_logistics_training, colour = "Logistics")) +
labs(x = "Diameter", y = "Height", title = "Tree Height - Diameter Model Curve (Logistics)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Logistics"="#120c4c"))
# Scattered Plot (Model Performance Curve) -- Weibull
ggplot() +
geom_point(aes(x = training$DIAMETER, y = training$HEIGHT, colour = "Points")) +
geom_line(aes(x = training$DIAMETER, y = predictions_weibull_training, colour = "Weibull")) +
labs(x = "Diameter", y = "Height", title = "Tree Height - Diameter Model Curve (Weibull)", color = "Legend") +
theme(legend.position = c(0.90, 0.10), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Weibull"="#120c4c"))
# Model Residuals Table
residuals_table <- data.frame(
"SVR" = residuals(model_svr),
"ANN" = model_ann$generalized.weights,
"Power" = residuals(model_power),
"Chapman" = residuals(model_chapman),
"Logistics" = residuals(model_logistics),
"Weibull" = residuals(model_weibull)
)
# Scattered Plot (Fitted VS Residuals Values) -- SVR
ggplot() +
geom_point(aes(x = fitted(model_svr), y = residuals(model_svr), colour = "Points")) +
geom_abline(aes(slope=0, intercept=0, colour = "SVR")) +
labs(x = "Predicted Height (m)", y = "Residuals", title = "Tree Height - Diameter -- Fitted vs Residuals (SVR)", color = "Legend") +
theme(legend.position = c(0.99, 0.01), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "SVR"="#4954ed"))
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
ggplot() +
geom_point(aes(x = fitted(model_logistics), y = residuals(model_logistics), colour = "Points")) +
geom_abline(aes(slope=0, intercept=0, colour = "Logistics")) +
labs(x = "Predicted Height (m)", y = "Residuals", title = "Tree Height - Diameter -- Fitted vs Residuals (Logistics)", color = "Legend") +
theme(legend.position = c(0.75, 0.70), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Logistics"="#4954ed"))
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- SVR
ggplot(residuals_table, aes(sample = SVR)) +
geom_qq(color = "#a32e2e") +
geom_qq_line(color = "#4954ed") +
labs(x = "Normal Quantiles", y = "Residuals", title = "Tree H-D Standardized Normal Quantile vs Residuals (SVR)")
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- Logistics
ggplot(residuals_table, aes(sample = Logistics)) +
geom_qq(color = "#a32e2e") +
geom_qq_line(color = "#4954ed") +
labs(x = "Normal Quantiles", y = "Residuals", title = "Tree H-D Standardized Normal Quantile vs Residuals (Logistics)")
model_svr$coefs
model_svr
View(summary_chapman)
summary_chapman[["parameters"]]
summary_ann[["parameters"]]
summary_svr[["parameters"]]
summary_logistics[["parameters"]]
summary_model_svr[["parameters"]]
summary_model_ann[["parameters"]]
View(summary_model_svr)
summary_model_svr[["coef0"]]
summary_model_svr[["epsilon"]]
?svm
View(summary_model_svr)
plot(x = training$DIAMETER, y = training$HEIGHT)
abline(training$DIAMETER, predictions_logistics_training)
plot(x = training$DIAMETER, y = training$HEIGHT)
abline(training$DIAMETER, predictions_logistics_training)
abline(predictions_logistics_training)
abline(training$DIAMETER, predictions_logistics_training)
abline(a = training$DIAMETER, b = predictions_logistics_training)
abline(a = training$DIAMETER, b = predictions_logistics_training)
abline(h = predictions_logistics_training)
abline(a = training$DIAMETER, b = predictions_logistics_training)
plot(x = training$DIAMETER, y = training$HEIGHT)
abline(a = training$DIAMETER, b = predictions_logistics_training)
?neuralnet
plot(model_logistics)
plot(model_svr)
plot(model_svr)
plot(model_logistics, main="Logistics")
plot(model_svr, main="SVR")
plot(model_logistics, main="Logistics")
plot(model_svr, main="SVR")
plot(x = training$DIAMETER, y = training$HEIGHT)
abline(model_logistics)
summary_logistics[["parameters"]]
summary_logistics[["parameters"]][["a"]]
summary_logistics[["parameters"]]["a"]
View(summary_logistics)
summary_logistics[["parameters"]][1]
summary_logistics[["parameters"]]["a"]
plot(x = training$DIAMETER, y = training$HEIGHT)
abline(a = summary_logistics[["parameters"]][1], b = summary_logistics[["parameters"]][2])
abline(h = 0)
plot(x = training$DIAMETER, y = training$HEIGHT)
abline(h = 0)
# All Species Distribution Plot
plot(
x = dataset$DIAMETER,
y = dataset$HEIGHT,
main = "Tree Height vs Diameter (Data Distribution)",
xlab = "Diameter", ylab = "Height")
ggplot(frequency_dist_bar, aes(x = Initials, y = Frequency)) +
geom_col(fill = "#4038bb", color = "#e92929") +
labs(title = "Species Frequency Distribution Bar", x = "Species", y = "Frequency")
barplot(
frequency_dist_bar, main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
barplot(
frequency_dist_bar$Frequency, main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
barplot(
frequency_dist_bar$Frequency, frequency_dist_bar$Initials, main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
?barplot
hist(
frequency_dist_bar$Frequency, frequency_dist_bar$Initials, main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = frequency_dist_bar$Frequency, frequency_dist_bar$Initials, main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
frequency_dist_bar$Frequency
typeof(frequency_dist_bar$Frequency)
hist(
x = as.numeric(frequency_dist_bar$Frequency), frequency_dist_bar$Initials, main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = as.numeric(frequency_dist_bar$Frequency), y = frequency_dist_bar$Initials, main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = as.numeric(frequency_dist_bar$Frequency), main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = as.numeric(x = frequency_dist_bar$Frequency), main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = as.numeric(y = frequency_dist_bar$Frequency), main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = as.numeric(frequency_dist_bar$Frequency),
y = frequency_dist_bar$Initials,
main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
?hist
hist(
x = as.numeric(frequency_dist_bar$Frequency),
ylim = frequency_dist_bar$Initials,
main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(frequency_dist_bar)
hist(frequency_dist_bar$Initials)
hist(frequency_dist_bar$Frequency)
hist(as.numeric(frequency_dist_bar$Frequency))
hist(
x = as.numeric(frequency_dist_bar$Frequency),
ylim = frequency_dist_bar$Initials,
main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
?hist
hist(
x = as.numeric(frequency_dist_bar$Frequency),
main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = as.numeric(frequency_dist_bar),
main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = as.list.numeric_version(frequency_dist_bar),
main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = as.numeric(frequency_dist_bar$Species),
main = "Species Frequency Distribution Bar",
xlab = "Species",
ylab = "Frequency")
hist(
x = as.numeric(frequency_dist_bar$Species),
main = "Species Frequency Distribution Bar")
hist(
x = as.numeric(frequency_dist_bar$Frequency),
main = "Species Frequency Distribution Bar")
frequency_dist_bar$Frequency
barplot(
x = as.numeric(frequency_dist_bar$Frequency),
main = "Species Frequency Distribution Bar")
hist(
x = as.numeric(frequency_dist_bar$Species),
main = "Species Frequency Distribution Bar",
xlab = "Frequency",
ylab = "Species")
hist(
x = as.numeric(frequency_dist_bar$Frequency),
main = "Species Frequency Distribution Bar",
xlab = "Frequency",
ylab = "Species")
# Scattered Plot (Model Performance Line/Curve)
plot(
x = training$DIAMETER,
y = training$HEIGHT
)
curve(predictions_logistics_training)
?curve
plot(qnorm) # default range c(0, 1) is appropriate here,
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
op <- par(mfrow = c(2, 2))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
plot (chippy, -8, -5)
for(ll in c("", "x", "y", "xy"))
curve(log(1+x), 1, 100, log = ll, sub = paste0("log = '", ll, "'"))
par(op)
# Scattered Plot (Model Performance Curve) -- SVR
curve(model_logistics)
# Scattered Plot (Model Performance Curve) -- SVR
curve(model_ann)
# Scattered Plot (Model Performance Curve) -- SVR
plot(model_ann)
# Scattered Plot (Model Performance Curve) -- SVR
plot(model_svr)
# Scattered Plot (Model Performance Curve) -- SVR
plot(model_logistics)
# Scattered Plot (Model Performance Curve) -- SVR
plot(model_svr)
# Scattered Plot (Model Performance Curve) -- SVR
plot(model_ann)
View(summary_table_training)
model_power
model_power[["parameters"]]
View(summary_power)
summary_power[["parameters"]]
summary_power[["parameters"]][1]
summary_power[["parameters"]]
summary_power[["parameters"]][2]
View(summary_chapman)
summary_chapman[["parameters"]]
summary_chapman[["parameters"]][1]
summary_chapman[["parameters"]][2]
View(summary_logistics)
summary_logistics[["parameters"]]
View(summary_weibull)
summary_weibull[["parameters"]]
#-------------------------------- Parameters Table -----------------------------#
#NLS Parameters
parameter_nls <- data.frame(
"a" = c(summary_power[["parameters"]][1], summary_chapman[["parameters"]][1], summary_logistics[["parameters"]][1], summary_weibull[["parameters"]][1]),
"b" = c(summary_power[["parameters"]][2], summary_chapman[["parameters"]][2], summary_logistics[["parameters"]][2], summary_weibull[["parameters"]][2]),
"c" = c("-", summary_chapman[["parameters"]][3], summary_logistics[["parameters"]][3], summary_weibull[["parameters"]][3])
)
rownames(parameter_nls) <- c("Power", "Chapman", "Logistics", "Weibull")
View(parameter_nls)
#-------------------------------- Parameters Table -----------------------------#
#NLS Parameters
parameter_nls <- data.frame(
"a" = c(round(summary_power[["parameters"]][1], 5), round(summary_chapman[["parameters"]][1], 5), round(summary_logistics[["parameters"]][1], 5), round(summary_weibull[["parameters"]][1], 5)),
"b" = c(round(summary_power[["parameters"]][2], 5), round(summary_chapman[["parameters"]][2], 5), round(summary_logistics[["parameters"]][2], 5), round(summary_weibull[["parameters"]][2], 5)),
"c" = c("-", round(summary_chapman[["parameters"]][3], 5), round(summary_logistics[["parameters"]][3], 5), round(summary_weibull[["parameters"]][3], 5))
)
rownames(parameter_nls) <- c("Power", "Chapman", "Logistics", "Weibull")
View(parameter_nls)
rownames(parameter_nls) <- c("Power", "Chapman", "Logistics", "Weibull")
colnames(parameter_nls) <- c("Model", "a", "b", "c")
View(parameter_nls)
View(parameter_nls)
summary_power[["parameters"]]
summary_chapman[["parameters"]]
summary_logistics[["parameters"]]
summary_weibull[["parameters"]]
?svr
??svr
?svm
View(summary_model_svr)
summary_model_svr[["gamma"]]
coef(model_svr)
coef(model_logistics)
coef(model_ann)
coef(model_ann)
summary_model_svr[["coef0"]]
summary_model_svr[["nu"]]
# ML Parameters
parameters_ml <- data.frame(
degree = c(summary_model_svr[["degree"]], "-"),
gamma = c(summary_model_svr[["gamma"]], "-"),
coef0 = c(summary_model_svr[["coef0"]], "-"),
nu = c(summary_model_svr[["nu"]], "-")
)
rownames(parameters_ml) <- c("SVR", "ANN")
View(parameters_ml)
summary(model_svr)
View(parameters_ml)
# ML Parameters
parameters_ml <- data.frame(
degree = c(summary_model_svr[["degree"]], "-"),
gamma = c(summary_model_svr[["gamma"]], "-"),
coef0 = c(summary_model_svr[["coef0"]], "-"),
nu = c(summary_model_svr[["nu"]], "-"),
cost = c(summary_model_svr[["cost"]], "-")
)
rownames(parameters_ml) <- c("SVR", "ANN")
View(parameters_ml)
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
ggplot() +
geom_point(aes(x = fitted(model_logistics), y = residuals(model_logistics), colour = "Points")) +
geom_abline(aes(slope=0, intercept=0, colour = "Logistics")) +
labs(x = "Fitted Values", y = "Standardized Residuals", title = "Tree Height - Diameter -- Fitted vs Residuals (Logistics)", color = "Legend") +
theme(legend.position = c(0.75, 0.70), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Logistics"="#4954ed"))
ggplot() +
geom_point(model_logistics)
ggplot() +
geom_point(aes(model_logistics))
plot(model_logistics)
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
ggplot() +
geom_point(aes(x = fitted(model_logistics), y = residuals(model_logistics), colour = "Points")) +
geom_abline(aes(slope=0, intercept=0, colour = "Logistics")) +
labs(x = "Fitted Values", y = "Standardized Residuals", title = "Tree Height - Diameter -- Fitted vs Residuals (Logistics)", color = "Legend") +
theme(legend.position = c(0.75, 0.70), legend.justification = c("right", "bottom")) +
scale_color_manual(values = c("Points"="#a32e2e", "Logistics"="#4954ed"))
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- SVR
ggplot(residuals_table, aes(sample = SVR)) +
geom_qq(color = "#a32e2e") +
geom_qq_line(color = "#4954ed") +
labs(x = "Normal Quantiles", y = "Residuals", title = "Tree H-D Standardized Normal Quantile vs Residuals (SVR)")
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- Logistics
ggplot(residuals_table, aes(sample = Logistics)) +
geom_qq(color = "#a32e2e") +
geom_qq_line(color = "#4954ed") +
labs(x = "Normal Quantiles", y = "Residuals", title = "Tree H-D Standardized Normal Quantile vs Residuals (Logistics)")
plot(residuals_table$Logistics
plot(residuals_table$Logistics)
plot(residuals_table$Logistics)
qqnorm(model_logistics)
qqline(model_logistics)
qqline(residuals(model_logistics))
qqnorm(model_logistics)
# Scattered Plot (Fitted VS Residuals Values) -- SVR
plot(model_svr)
# Scattered Plot (Fitted VS Residuals Values) -- SVR
plot(model_svr)
# Scattered Plot (Fitted VS Residuals Values) -- SVR
plot(model_svr)
# Scattered Plot (Fitted VS Residuals Values) -- SVR
plot(model_svr)
# Scattered Plot (Fitted VS Residuals Values) -- SVR
plot(model_logistics)
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
plot(model_logistics, col = black,
main = "Tree H-D Fitted VS Residuals Values",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
plot(model_logistics, cols = black,
main = "Tree H-D Fitted VS Residuals Values",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
plot(model_logistics, cols = "black",
main = "Tree H-D Fitted VS Residuals Values",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
plot(model_logistics, col = "black",
main = "Tree H-D Fitted VS Residuals Values",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
residuals(model_svr)
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- SVR
qqnorm(residuals(model_svr, type = "pearson"),
main = "Standardized Normal Quantile vs Standardized Residuals -- SVR",
xlab = "Standardized Normal Quantile", ylab = "Standardized Residuals")
qqline(residuals(model_svr,type = "pearson"))
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- Logistics
qqnorm(model_logistics)
qqline(model_logistics)
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- Logistics
qqnorm(model_logistics)
qqline(residuals(model_logistics, type = "pearson"))
qqline(residuals(model_logistics, type = "pearson"))
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- Logistics
qqnorm(model_logistics)
qqline(residuals(model_logistics, type = "pearson"))
qqnorm(residuals(model_logistics, type = "pearson"),
main = "Standardized Normal Quantile vs Standardized Residuals -- SVR",
xlab = "Standardized Normal Quantile", ylab = "Standardized Residuals")
qqline(residuals(model_logistics,type = "pearson"))
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- Logistics
qqnorm(model_logistics)
qqline(residuals(model_logistics, type = "pearson"))
qqnorm(residuals(model_logistics, type = "pearson"),
main = "Standardized Normal Quantile vs Standardized Residuals -- SVR",
xlab = "Standardized Normal Quantile", ylab = "Standardized Residuals")
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- SVR
qqnorm(residuals(model_svr, type = "pearson"),
main = "Tree H-D Standardized Normal Quantile vs Standardized Residuals -- SVR",
xlab = "Standardized Normal Quantile", ylab = "Standardized Residuals")
qqline(residuals(model_svr,type = "pearson"))
# Scattered Plot (Standardized Normal Quantile vs Residuals) -- Logistics
qqnorm(residuals(model_logistics, type = "pearson"),
main = "Tree H-D Standardized Normal Quantile vs Standardized Residuals -- Logistics",
xlab = "Standardized Normal Quantile", ylab = "Standardized Residuals")
qqline(residuals(model_logistics,type = "pearson"))
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
plot(model_logistics, col = "black",
main = "Tree H-D Fitted VS Residuals Values",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
plot(fitted(model_logistics), residuals(model_logistics, type = "pearson"),
xlab = "Predicted H (m)", ylab = "Residuals")
abline(h=0)
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
plot(model_logistics, col = "black",
main = "Tree H-D Fitted VS Residuals Values",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
plot(model_logistics, col = "black",
main = "Tree H-D Fitted VS Residuals Values",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
plot(fitted(model_logistics), residuals(model_logistics, type = "pearson"),
xlab = "Predicted H (m)", ylab = "Residuals")
abline(h=0)
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
plot(model_logistics, col = "black",
main = "Tree H-D Fitted VS Residuals Values",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Fitted VS Residuals Values) -- SVR
plot(fitted(model_svr), residuals(model_svr, type = "pearson"),
main = "Tree H-D Fitted VS Residuals Values",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# Scattered Plot (Fitted VS Residuals Values) -- SVR
plot(fitted(model_svr), residuals(model_svr, type = "pearson"),
main = "Tree H-D Fitted VS Residuals Values -- SVR",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
abline(h=0)
# Scattered Plot (Fitted VS Residuals Values) -- Logistics
plot(model_logistics, col = "black",
main = "Tree H-D Fitted VS Residuals Values -- Logistics",
xlab = "Fitted Values",
ylab = "Standardized Residuals")
# All Species Distribution Plot
plot(
x = dataset$DIAMETER,
y = dataset$HEIGHT,
main = "Tree Height vs Diameter (Data Distribution)",
xlab = "Diameter (cm)", ylab = "Height (m)")
# All Species Distribution Plot
ggplot() +
geom_point(aes(x = dataset$DIAMETER, y = dataset$HEIGHT), colour = "#a32e2e") +
ggtitle("Tree H-D Height vs Diameter (Data Distribution)") +
xlab("Diameter (cm)") +
ylab("Height (m)")
plot(
x = dataset$DIAMETER,
y = dataset$HEIGHT,
main = "Tree H-D Height vs Diameter (Data Distribution)",
xlab = "Diameter (cm)", ylab = "Height (m)")
# All Species Distribution Plot
ggplot() +
geom_point(aes(x = dataset$DIAMETER, y = dataset$HEIGHT), colour = "#a32e2e") +
ggtitle("Tree H-D Height vs Diameter (Data Distribution)") +
xlab("Diameter (cm)") +
ylab("Height (m)")
install.packages("rcompanion")
install.packages("r-companion")
install.packages("rcompanion")
install.packages("rcompanion")
?rsq
?rsq
??rsq
rsq.rpart(training$DIAMETER)
